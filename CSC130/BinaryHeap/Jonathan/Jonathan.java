import java.util.*;public class Jonathan{	private int array[];	private int length;	static int b = 1;	static Scanner input = new Scanner (System.in);	public static void main(String a[]){				Jonathan sorter = new Jonathan();		//Create a Dynamic array size		System.out.println("Input total number of variables:");		int total = input.nextInt();				//Array size and counters are added (or start at) 1 to mimic an array 1->n, instead of 0->n		int[] totalArray = new int[total+1];				//Insert value of each variable of the array. Should not be in order, so we can see the use of the		//quicksort algorithm. 		System.out.println("Insert value of each variable: ");		for(int i = 1; i<=totalArray.length-1; i++){			System.out.print(i+":");			totalArray[i] = input.nextInt();		}				//Input the k'th largest number we want to find in the array. 		System.out.println("What is the K'th largest number you want to find?");		int kth = input.nextInt();				//The unsorted array is displayed		System.out.println("Unsorted array being used:");		for(int i=1; i<totalArray.length; i++){			System.out.print(totalArray[b] +" ");			b++;		}		System.out.println("");				// Array is sorted		sorter.sort(totalArray);		b = 1;				//Sorted array is displayed		System.out.println("Array sorted: ");		for(int i=1; i<totalArray.length; i++){			System.out.print(totalArray[b] +" ");			b++;		}		System.out.println("");				//The K'th number is displayed. 		System.out.println("Kth number: \n" + totalArray[kth]);	}				public void sort(int[] totalArray) {		if (totalArray == null || totalArray.length == 0) {			return;		}		this.array = totalArray;		length = totalArray.length;		quickSort(0, length - 1);	}		private void quickSort(int lowerIndex, int higherIndex) {		int i = lowerIndex;		int j = higherIndex;		// calculate pivot number, I am taking pivot as middle index number		int pivot = array[lowerIndex+(higherIndex-lowerIndex)/2];		// Divide into two arrays		while (i <= j){			while (array[i] < pivot) {				i++;			}			while (array[j] > pivot) {				j--;			}			if (i <= j) {				exchangeNumbers(i, j);				i++;				j--;			}		}				if (lowerIndex < j)		quickSort(lowerIndex, j);	if (i < higherIndex)	quickSort(i, higherIndex);}private void exchangeNumbers(int i, int j) {	int temp = array[i];	array[i] = array[j];	array[j] = temp;}}